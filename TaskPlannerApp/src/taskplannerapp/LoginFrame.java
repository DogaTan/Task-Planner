/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package taskplannerapp;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;


/**
 *
 * @author dogat
 */
public class LoginFrame extends javax.swing.JFrame {

    
    /**
     * Creates new form LoginFrame
     */
    
    public LoginFrame() {
        initComponents();  
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width/2 - getWidth()/2, size.height/2 - getHeight()/2);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoginPanel = new javax.swing.JPanel();
        loginUsernameLabel = new javax.swing.JLabel();
        loginPasswordLabel = new javax.swing.JLabel();
        passwordText = new javax.swing.JPasswordField();
        usernameText = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        loginTitle = new javax.swing.JLabel();
        showPasswordCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LoginFrame");

        LoginPanel.setBackground(new java.awt.Color(60, 20, 101));
        LoginPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 3, true));
        LoginPanel.setToolTipText("");
        LoginPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        loginUsernameLabel.setFont(new java.awt.Font("Stencil", 0, 18)); // NOI18N
        loginUsernameLabel.setForeground(new java.awt.Color(255, 255, 255));
        loginUsernameLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/taskPlannerIcons/icons8_user_16px_1.png"))); // NOI18N
        loginUsernameLabel.setText("USERNAME");

        loginPasswordLabel.setFont(new java.awt.Font("Stencil", 0, 18)); // NOI18N
        loginPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        loginPasswordLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/taskPlannerIcons/icons8_password_16px_2.png"))); // NOI18N
        loginPasswordLabel.setText("PASSWORD");

        passwordText.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        usernameText.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        loginButton.setBackground(new java.awt.Color(214, 213, 213));
        loginButton.setFont(new java.awt.Font("Stencil", 1, 18)); // NOI18N
        loginButton.setForeground(new java.awt.Color(51, 0, 102));
        loginButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/taskPlannerIcons/icons8_enter_26px_1.png"))); // NOI18N
        loginButton.setText("LOGIN");
        loginButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        loginTitle.setBackground(new java.awt.Color(60, 20, 101));
        loginTitle.setFont(new java.awt.Font("Stencil", 3, 36)); // NOI18N
        loginTitle.setForeground(new java.awt.Color(255, 255, 255));
        loginTitle.setText("                     LOGIN");
        loginTitle.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 3, true));

        showPasswordCheck.setText("jCheckBox1");
        showPasswordCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/taskPlannerIcons/icons8_show_password_30px.png"))); // NOI18N
        showPasswordCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoginPanelLayout = new javax.swing.GroupLayout(LoginPanel);
        LoginPanel.setLayout(LoginPanelLayout);
        LoginPanelLayout.setHorizontalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loginTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loginUsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loginPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(LoginPanelLayout.createSequentialGroup()
                                .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(showPasswordCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        LoginPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {passwordText, usernameText});

        LoginPanelLayout.setVerticalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addComponent(loginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginUsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showPasswordCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        LoginPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {passwordText, usernameText});

        LoginPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {loginPasswordLabel, loginUsernameLabel});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LoginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LoginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        LoginPanel.getAccessibleContext().setAccessibleName("Login");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
      
        String username = usernameText.getText();
        String password = String.valueOf(passwordText.getPassword());
        if(username.isEmpty()|| password.isEmpty()){
            JOptionPane.showMessageDialog(this,"Username / Password should NOT be empty!","Error",JOptionPane.ERROR_MESSAGE);
        }
        else{
          
            try {
                //start the login process.
                userLogin(username,password); 
            } catch (SQLException ex) {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
                      
        }
       
        
        
    }//GEN-LAST:event_loginButtonActionPerformed

    private void showPasswordCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordCheckActionPerformed
        // TODO add your handling code here:
        if(showPasswordCheck.isSelected()){
            passwordText.setEchoChar((char)0); 
        }
        else{
            passwordText.setEchoChar('*'); 
        }
    }//GEN-LAST:event_showPasswordCheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginPasswordLabel;
    private javax.swing.JLabel loginTitle;
    private javax.swing.JLabel loginUsernameLabel;
    private javax.swing.JPasswordField passwordText;
    private javax.swing.JCheckBox showPasswordCheck;
    private javax.swing.JTextField usernameText;
    // End of variables declaration//GEN-END:variables

    private void userLogin(String Username, String User_Password) throws SQLException {
        Connection DBconn = TaskPlanner_Database.myConnection();
        if(DBconn != null){
        try {
            PreparedStatement st =(PreparedStatement)DBconn.prepareStatement("SELECT * FROM users WHERE Username = ? AND User_Password = ?");
            st.setString(1, Username); 
            st.setString(2, User_Password);
            ResultSet rs = st.executeQuery();
            if(rs.next()){
                //Display mainFrame
                JOptionPane.showMessageDialog(this,"Login successful...","Confirmation",JOptionPane.INFORMATION_MESSAGE);
                dispose(); 
                MainFrame mainFrame = new MainFrame(Username);
                mainFrame.setVisible(true);  
                checkDeadline();
            }
            else{
                JOptionPane.showMessageDialog(this,"Username / Password NOT found!","Error",JOptionPane.ERROR_MESSAGE); 
            }
           
        } catch (SQLException ex) {
            Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else{
            System.out.println("The connection is NOT available!");
        }
    }
    
    private void checkDeadline(){
        try {
          
          Statement s1 = TaskPlanner_Database.myConnection().createStatement();
          ResultSet rs1 = s1.executeQuery("SELECT User_Id FROM users WHERE Username = '"+usernameText.getText()+"'");
          String userID = null;
          if(rs1.next()){
            userID = rs1.getString(1);
          }
          Statement s = TaskPlanner_Database.myConnection().createStatement();
          ResultSet rs = s.executeQuery(" SELECT Id, Task_Name,Short_Desc,Deadline,Priority,Reminder_Image,Entry_Date FROM tasks WHERE User_Id ="+userID+" AND Deadline = DATE_ADD(CURRENT_DATE,INTERVAL 1 DAY)");
          Vector v = new Vector();
          while (rs.next()) {              
               
              v.add(rs.getInt(1));
              v.add(rs.getString(2));
              v.add(rs.getString(3));
              v.add(rs.getDate(4));
              v.add(rs.getInt(5));
              v.add(rs.getBoolean(6));
              v.add(rs.getDate(7));
            
          }
          if(!v.isEmpty()){
                JOptionPane.showMessageDialog(this,"You have some tasks with one day left until the deadline!","Notification",JOptionPane.WARNING_MESSAGE);  
              
          }
                
      } catch (Exception e) {
          System.out.println(e);
      }
    }
    
    
}
